// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dsKnowledgeTest.Data;

#nullable disable

namespace dsKnowledgeTest.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230309092227_add_column_for_test_model")]
    partial class add_column_for_test_model
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dsKnowledgeTest.Models.AnsweredQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PassedTestId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<string>("SelectedAnswers")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PassedTestId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnsweredQuestions");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("CntTest")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Feedback", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateData")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.PassedTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfPassage")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeSpent")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("PassedTests");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Answers")
                        .HasColumnType("text");

                    b.Property<string>("Explanation")
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfPoints")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TestId")
                        .HasColumnType("uuid");

                    b.Property<string>("TrueAnswers")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Test", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int?>("CntQuestion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRandomAnswers")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsRandomQuestions")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTestOnTime")
                        .HasColumnType("boolean");

                    b.Property<double?>("MinThreshold")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.Property<int?>("TestLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeForTest")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Specialization")
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1ed448a-d1ec-4bec-bbee-7d6c3e600648"),
                            DataCreated = new DateTime(2023, 3, 9, 9, 22, 26, 597, DateTimeKind.Utc).AddTicks(4291),
                            DataUpdated = new DateTime(2023, 3, 9, 9, 22, 26, 597, DateTimeKind.Utc).AddTicks(4614),
                            Email = "administrator@gmail.com",
                            FirstName = "Николай",
                            IsActivated = true,
                            IsDeleted = false,
                            LastName = "Степанов",
                            Login = "administrator",
                            Organization = "ООО ДримСофт",
                            Password = "25D55AD283AA400AF464C76D713C07AD",
                            PhoneNumber = "+375293331648",
                            Role = 0,
                            Specialization = "Администратор",
                            SurName = "Викторович"
                        });
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.AnsweredQuestion", b =>
                {
                    b.HasOne("dsKnowledgeTest.Models.PassedTest", "PassedTest")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("PassedTestId");

                    b.HasOne("dsKnowledgeTest.Models.Question", "Question")
                        .WithMany("AnsweredQuestions")
                        .HasForeignKey("QuestionId");

                    b.Navigation("PassedTest");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.PassedTest", b =>
                {
                    b.HasOne("dsKnowledgeTest.Models.Test", "Test")
                        .WithMany("PassedTests")
                        .HasForeignKey("TestId");

                    b.HasOne("dsKnowledgeTest.Models.User", "User")
                        .WithMany("PassedTests")
                        .HasForeignKey("UserId");

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Question", b =>
                {
                    b.HasOne("dsKnowledgeTest.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Test", b =>
                {
                    b.HasOne("dsKnowledgeTest.Models.Category", "Category")
                        .WithMany("Tests")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Category", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.PassedTest", b =>
                {
                    b.Navigation("AnsweredQuestions");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Question", b =>
                {
                    b.Navigation("AnsweredQuestions");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.Test", b =>
                {
                    b.Navigation("PassedTests");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("dsKnowledgeTest.Models.User", b =>
                {
                    b.Navigation("PassedTests");
                });
#pragma warning restore 612, 618
        }
    }
}
